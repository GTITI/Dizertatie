{"version":3,"sources":["serviceWorker.js","Button/index.js","Input/index.js","App/Navigation/index.js","constants/routes.js","Repository/fragments.js","Link/index.js","Repository/mutations.js","Repository/RepositoryItem/index.js","Issue/IssueList/queries.js","Comment/CommentList/queries.js","Comment/CommentItem/index.js","Comment/CommentAdd/mutations.js","TextArea/index.js","Error/index.js","Comment/CommentAdd/index.js","Loading/index.js","FetchMore/index.js","Comment/CommentList/index.js","Comment/index.js","Issue/IssueItem/index.js","Issue/IssueList/index.js","Issue/index.js","Repository/RepositoryList/index.js","Repository/index.js","Profile/index.js","Organization/index.js","App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","ButtonUnobtrusive","_ref2","children","className","_ref2$type","type","props","Object","objectWithoutProperties","react_default","a","createElement","assign","concat","Button","_ref","_ref$color","color","_ref$type","Input","OrganizationSearch","state","value","_this","organizationName","onChange","event","setState","target","onSubmit","onOrganizationSearch","preventDefault","this","src_Input","src_Button","React","Component","withRouter","pathname","es_Link","to","Navigation_OrganizationSearch","REPOSITORY_FRAGMENT","gql","_templateObject","Link","rel","STAR_REPOSITORY","mutations_templateObject","UNSTAR_REPOSITORY","_templateObject2","WATCH_REPOSITORY","_templateObject3","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","client","_ref$data$updateSubsc","data","updateSubscription","subscribable","id","repository","readFragment","fragment","totalCount","watchers","writeFragment","objectSpread","updateAddStar","_ref2$data$addStar$st","addStar","starrable","viewerHasStarred","getUpdatedStarData","updateRemoveStar","_ref3","_ref3$data$removeStar","removeStar","stargazers","RepositoryItem","_ref4","name","url","descriptionHTML","primaryLanguage","owner","src_Link","href","react_apollo_browser_umd","mutation","variables","optimisticResponse","__typename","update","_ref5","loading","error","data-test-id","onClick","_ref7","_ref6","dangerouslySetInnerHTML","__html","login","GET_ISSUES_OF_REPOSITORY","queries_templateObject","GET_COMMENTS_OF_ISSUE","CommentList_queries_templateObject","Comment","comment","author","bodyHTML","ADD_COMMENT","CommentAdd_mutations_templateObject","TextArea","ErrorMessage","toString","CommentAdd","addComment","then","_this2","issueId","body","subjectId","Error","e","src_TextArea","placeholder","Loading","dots","onTick","prevState","interval","setInterval","clearInterval","isCenter","classNames","push","join","Array","fill","map","dot","FetchMore","hasNextPage","updateQuery","fetchMore","src_Loading","Button_ButtonUnobtrusive","previousResult","fetchMoreResult","issue","comments","edges","toConsumableArray","CommentList","repositoryOwner","repositoryName","number","node","CommentItem","key","src_FetchMore","pageInfo","cursor","endCursor","Comments","query","notifyOnNetworkStatusChange","react","CommentList_CommentList","Comment_CommentAdd","withState","isShowComments","onShowComments","title","src_Comment","ISSUE_STATES","TRANSITION_LABELS","_TRANSITION_LABELS","defineProperty","TRANSITION_STATE","_TRANSITION_STATE","isShow","issueState","issues","IssueFilter","onChangeIssueState","onMouseOver","nextIssueState","prefetchIssues","IssueList","Issue_IssueItem","Issues","IssueList_IssueFilter","length","IssueList_IssueList","getUpdateQuery","entry","repositories","RepositoryList","handleOnScroll","scrollTop","document","documentElement","scrollHeight","clientHeight","innerHeight","scrolledToBottom","Math","ceil","_this$props","addEventListener","removeEventListener","Repository_RepositoryItem","Issue","PureComponent","GET_REPOSITORIES_OF_CURRENT_USER","Profile_templateObject","Profile","viewer","Repository","GET_REPOSITORIES_OF_ORGANIZATION","Organization_templateObject","Organization","skip","console","log","search","organization","App","BrowserRouter","App_Navigation","Route","exact","path","component","src_Organization","src_Profile","httpLink","HttpLink","uri","headers","authorization","process","errorLink","onError","graphQLErrors","networkError","message","locations","link","ApolloLink","from","cache","InMemoryCache","ApolloClient","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8fAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kJCEAC,SAAoB,SAAAC,GAAA,IACxBC,EADwBD,EACxBC,SACAC,EAFwBF,EAExBE,UAFwBC,EAAAH,EAGxBI,YAHwB,IAAAD,EAGjB,SAHiBA,EAIrBE,EAJqBC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,wCAMxBQ,EAAAC,EAAAC,cAAA,SAAAJ,OAAAK,OAAA,CACET,UAAS,GAAAU,OAAKV,EAAL,uBACTE,KAAMA,GACFC,GAEHJ,KAMUY,EAjCA,SAAAC,GAAA,IACbb,EADaa,EACbb,SACAC,EAFaY,EAEbZ,UAFaa,EAAAD,EAGbE,aAHa,IAAAD,EAGL,QAHKA,EAAAE,EAAAH,EAIbV,YAJa,IAAAa,EAIN,SAJMA,EAKVZ,EALUC,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,gDAObN,EAAAC,EAAAC,cAAA,SAAAJ,OAAAK,OAAA,CACET,UAAS,GAAAU,OAAKV,EAAL,mBAAAU,OAAgCI,GACzCZ,KAAMA,GACFC,GAEHJ,ICNUiB,SAND,SAAAJ,GAAA,IAAGb,EAAHa,EAAGb,SAAHc,EAAAD,EAAaE,aAAb,IAAAD,EAAqB,QAArBA,EAAiCV,EAAjCC,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,6BACZN,EAAAC,EAAAC,cAAA,QAAAJ,OAAAK,OAAA,CAAOT,UAAS,eAAAU,OAAiBI,IAAaX,GAC3CJ,KCyBCkB,oNACJC,MAAQ,CACNC,MAAOC,EAAKjB,MAAMkB,oBAGpBC,SAAW,SAAAC,GACTH,EAAKI,SAAS,CAAEL,MAAOI,EAAME,OAAON,WAGtCO,SAAW,SAAAH,GACTH,EAAKjB,MAAMwB,qBAAqBP,EAAKF,MAAMC,OAAS,kBAEpDI,EAAMK,0FAGC,IACCT,EAAUU,KAAKX,MAAfC,MAER,OACEb,EAAAC,EAAAC,cAAA,OAAKR,UAAU,qBACbM,EAAAC,EAAAC,cAAA,QAAMkB,SAAUG,KAAKH,UACnBpB,EAAAC,EAAAC,cAACsB,EAAD,CACEhB,MAAO,QACPZ,KAAK,OACLiB,MAAOA,EACPG,SAAUO,KAAKP,WACd,IACHhB,EAAAC,EAAAC,cAACuB,EAAD,CAAQjB,MAAO,QAASZ,KAAK,UAA7B,mBA3BuB8B,IAAMC,YAoCxBC,cA1DI,SAAAtB,GAAA,IACLuB,EADKvB,EACjBlB,SAAYyC,SACZd,EAFiBT,EAEjBS,iBACAM,EAHiBf,EAGjBe,qBAHiB,OAKjBrB,EAAAC,EAAAC,cAAA,UAAQR,UAAU,cAChBM,EAAAC,EAAAC,cAAA,OAAKR,UAAU,mBACbM,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAMC,GCfW,YDejB,YAEF/B,EAAAC,EAAAC,cAAA,OAAKR,UAAU,mBACbM,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAMC,GCnBgB,KDmBtB,iBCnBsB,MDsBvBF,GACC7B,EAAAC,EAAAC,cAAC8B,EAAD,CACEjB,iBAAkBA,EAClBM,qBAAsBA,ibEvB9B,IAwBeY,EAxBaC,IAAHC,KCMVC,EANF,SAAA9B,GAAA,IAAGb,EAAHa,EAAGb,SAAaI,EAAhBC,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,qBACXN,EAAAC,EAAAC,cAAA,IAAAJ,OAAAK,OAAA,GAAON,EAAP,CAAcsB,OAAO,SAASkB,IAAI,wBAC/B5C,8vBCFE,IAAM6C,EAAkBJ,IAAHK,KAWfC,EAAoBN,IAAHO,KAWjBC,EAAmBR,IAAHS,KCTvBC,EACQ,aADRA,EAEU,eAGVC,EAAU,SAAAC,GAAkB,OAChCA,IAAuBF,GAEnBG,EAAc,SAClBC,EADkB1C,GASf,IAAA2C,EAAA3C,EAND4C,KACEC,mBACEC,aAAgBC,EAInBJ,EAJmBI,GAAIP,EAIvBG,EAJuBH,mBAKpBQ,EAAaN,EAAOO,aAAa,CACrCF,GAAE,cAAAjD,OAAgBiD,GAClBG,SAAUvB,IAGNwB,EAAeH,EAAWI,SAA1BD,WACNA,EACEX,IAAuBF,EACnBa,EAAa,EACbA,EAAa,EAEnBT,EAAOW,cAAc,CACnBN,GAAE,cAAAjD,OAAgBiD,GAClBG,SAAUvB,EACViB,KAAKpD,OAAA8D,EAAA,EAAA9D,CAAA,GACAwD,EADD,CAEFI,SAAS5D,OAAA8D,EAAA,EAAA9D,CAAA,GACJwD,EAAWI,SADR,CAEND,oBAMFI,EAAgB,SACpBb,EADoBxD,GAAA,IAAAsE,EAAAtE,EAGlB0D,KACEa,QACEC,UAAaX,EALCS,EAKDT,GAAIY,EALHH,EAKGG,iBALH,OAUpBjB,EAAOW,cAAc,CACnBN,GAAE,cAAAjD,OAAgBiD,GAClBG,SAAUvB,EACViB,KAAMgB,EAAmBlB,EAAQK,EAAIY,MAGnCE,EAAmB,SACvBnB,EADuBoB,GASpB,IAAAC,EAAAD,EANDlB,KACEoB,WACEN,UAAaX,EAIhBgB,EAJgBhB,GAAIY,EAIpBI,EAJoBJ,iBAKvBjB,EAAOW,cAAc,CACnBN,GAAE,cAAAjD,OAAgBiD,GAClBG,SAAUvB,EACViB,KAAMgB,EAAmBlB,EAAQK,EAAIY,MAInCC,EAAqB,SAAClB,EAAQK,EAAIY,GACtC,IAAMX,EAAaN,EAAOO,aAAa,CACrCF,GAAE,cAAAjD,OAAgBiD,GAClBG,SAAUvB,IAGNwB,EAAeH,EAAWiB,WAA1Bd,WAGN,OAFAA,EAAaQ,EAAmBR,EAAa,EAAIA,EAAa,EAEvD3D,OAAA8D,EAAA,EAAA9D,CAAA,GACFwD,EADL,CAEEiB,WAAWzE,OAAA8D,EAAA,EAAA9D,CAAA,GACNwD,EAAWiB,WADN,CAERd,kBAuISe,EAlIQ,SAAAC,GAAA,IACrBpB,EADqBoB,EACrBpB,GACAqB,EAFqBD,EAErBC,KACAC,EAHqBF,EAGrBE,IACAC,EAJqBH,EAIrBG,gBACAC,EALqBJ,EAKrBI,gBACAC,EANqBL,EAMrBK,MACAP,EAPqBE,EAOrBF,WACAb,EARqBe,EAQrBf,SACAZ,EATqB2B,EASrB3B,mBACAmB,EAVqBQ,EAUrBR,iBAVqB,OAYrBjE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKR,UAAU,wBACbM,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC6E,EAAD,CAAMC,KAAML,GAAMD,IAGpB1E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+E,EAAA,SAAD,CACEC,SAAUxC,EACVyC,UAAW,CACT9B,KACAP,mBAAoBD,EAAQC,GACxBF,EACAA,GAENwC,mBAAoB,CAClBjC,mBAAoB,CAClBkC,WAAY,WACZjC,aAAc,CACZiC,WAAY,aACZhC,KACAP,mBAAoBD,EAAQC,GACxBF,EACAA,KAIV0C,OAAQvC,GAEP,SAACI,EAADoC,GAAA,OAAAA,EAAuBrC,KAAvBqC,EAA6BC,QAA7BD,EAAsCE,MACrCzF,EAAAC,EAAAC,cAACuB,EAAD,CACE/B,UAAU,8BACVgG,eAAa,qBACbC,QAASxC,GAERO,EAASD,WAAY,IACrBZ,EAAQC,GAAsB,UAAY,WAK/CmB,EA0BAjE,EAAAC,EAAAC,cAAC+E,EAAA,SAAD,CACEC,SAAU1C,EACV2C,UAAW,CAAE9B,MACb+B,mBAAoB,CAClBd,WAAY,CACVe,WAAY,WACZrB,UAAW,CACTqB,WAAY,aACZhC,KACAY,kBAAmBA,KAIzBqB,OAAQnB,GAEP,SAACG,EAADsB,GAAA,OAAAA,EAAe1C,KAAf0C,EAAqBJ,QAArBI,EAA8BH,MAC7BzF,EAAAC,EAAAC,cAACuB,EAAD,CACE/B,UAAU,8BACViG,QAASrB,GAERC,EAAWd,WAJd,aAzCJzD,EAAAC,EAAAC,cAAC+E,EAAA,SAAD,CACEC,SAAU5C,EACV6C,UAAW,CAAE9B,MACb+B,mBAAoB,CAClBrB,QAAS,CACPsB,WAAY,WACZrB,UAAW,CACTqB,WAAY,aACZhC,KACAY,kBAAmBA,KAIzBqB,OAAQzB,GAEP,SAACE,EAAD8B,GAAA,OAAAA,EAAY3C,KAAZ2C,EAAkBL,QAAlBK,EAA2BJ,MAC1BzF,EAAAC,EAAAC,cAACuB,EAAD,CACE/B,UAAW,8BACXiG,QAAS5B,GAERQ,EAAWd,WAJd,aAqCVzD,EAAAC,EAAAC,cAAA,OAAKR,UAAU,8BACbM,EAAAC,EAAAC,cAAA,OACER,UAAU,kCACVoG,wBAAyB,CAAEC,OAAQnB,KAErC5E,EAAAC,EAAAC,cAAA,OAAKR,UAAU,sCACbM,EAAAC,EAAAC,cAAA,WACG2E,GACC7E,EAAAC,EAAAC,cAAA,yBAAiB2E,EAAgBH,OAGrC1E,EAAAC,EAAAC,cAAA,WACG4E,GACC9E,EAAAC,EAAAC,cAAA,sBACSF,EAAAC,EAAAC,cAAA,KAAG8E,KAAMF,EAAMH,KAAMG,EAAMkB,4mBCnOzC,IAAMC,EAA2B/D,IAAHgE,goBCA9B,IAAMC,GAAwBjE,IAAHkE,MCUnBC,UARC,SAAA/F,GAAA,IAAGgG,EAAHhG,EAAGgG,QAAH,OACdtG,EAAAC,EAAAC,cAAA,OAAKR,UAAU,eACbM,EAAAC,EAAAC,cAAA,WAAMoG,EAAQC,OAAOP,MAArB,KADF,OAGEhG,EAAAC,EAAAC,cAAA,OAAK4F,wBAAyB,CAAEC,OAAQO,EAAQE,6RCN7C,UAAMC,GAAcvE,IAAHwE,MCQTC,UANE,SAAArG,GAAA,IAAGb,EAAHa,EAAGb,SAAaI,EAAhBC,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,qBACfN,EAAAC,EAAAC,cAAA,WAAAJ,OAAAK,OAAA,CAAUT,UAAS,YAAkBG,GAClCJ,KCIUmH,UANM,SAAAtG,GAAA,IAAGmF,EAAHnF,EAAGmF,MAAH,OACnBzF,EAAAC,EAAAC,cAAA,OAAKR,UAAU,gBACbM,EAAAC,EAAAC,cAAA,aAAQuF,EAAMoB,eC8CHC,8MA1CblG,MAAQ,CACNC,MAAO,MAGTG,SAAW,SAAAH,GACTC,EAAKI,SAAS,CAAEL,aAGlBO,SAAW,SAACH,EAAO8F,GACjBA,IAAaC,KAAK,kBAAMlG,EAAKI,SAAS,CAAEL,MAAO,OAE/CI,EAAMK,0FAGC,IAAA2F,EAAA1F,KACC2F,EAAY3F,KAAK1B,MAAjBqH,QACArG,EAAUU,KAAKX,MAAfC,MAER,OACEb,EAAAC,EAAAC,cAAC+E,EAAA,SAAD,CACEC,SAAUuB,GACVtB,UAAW,CAAEgC,KAAMtG,EAAOuG,UAAWF,IAEpC,SAACH,EAADzG,KAAe4C,KAAf5C,EAAqBkF,QAArB,IAA8BC,EAA9BnF,EAA8BmF,MAA9B,OACCzF,EAAAC,EAAAC,cAAA,WACGuF,GAASzF,EAAAC,EAAAC,cAACmH,GAAD,CAAc5B,MAAOA,IAE/BzF,EAAAC,EAAAC,cAAA,QAAMkB,SAAU,SAAAkG,GAAC,OAAIL,EAAK7F,SAASkG,EAAGP,KACpC/G,EAAAC,EAAAC,cAACqH,GAAD,CACE1G,MAAOA,EACPG,SAAU,SAAAsG,GAAC,OAAIL,EAAKjG,SAASsG,EAAEnG,OAAON,QACtC2G,YAAY,oBAEdxH,EAAAC,EAAAC,cAACuB,EAAD,CAAQ7B,KAAK,UAAb,sBAlCW+B,aCkCV8F,qNApCb7G,MAAQ,CACN8G,KAAM,KAWRC,OAAS,WACP7G,EAAKI,SAAS,SAAA0G,GAAS,MAAK,CAAEF,MAAOE,EAAUF,KAAO,GAAK,yFAR3DnG,KAAKsG,SAAWC,YAAYvG,KAAKoG,OARnB,oDAYdI,cAAcxG,KAAKsG,2CAOZ,IACCG,EAAazG,KAAK1B,MAAlBmI,SACAN,EAASnG,KAAKX,MAAd8G,KAEFO,EAAa,CAAC,WAMpB,OAJID,GACFC,EAAWC,KAAK,kBAIhBlI,EAAAC,EAAAC,cAAA,OAAKR,UAAWuI,EAAWE,KAAK,MAC9BnI,EAAAC,EAAAC,cAAA,wBACW,IAAIkI,MAAMV,GAAMW,KAAK,GAAGC,IAAI,SAAAC,GAAG,MAAI,eA9BhC5G,cCyBP6G,UAxBG,SAAAlI,GAAA,IAChBkF,EADgBlF,EAChBkF,QACAiD,EAFgBnI,EAEhBmI,YACAtD,EAHgB7E,EAGhB6E,UACAuD,EAJgBpI,EAIhBoI,YACAC,EALgBrI,EAKhBqI,UACAlJ,EANgBa,EAMhBb,SANgB,OAQhBO,EAAAC,EAAAC,cAAA,OAAKR,UAAU,aACZ8F,EACCxF,EAAAC,EAAAC,cAAC0I,GAAD,MAEAH,GACEzI,EAAAC,EAAAC,cAAC2I,EAAD,CACEnJ,UAAU,mBACViG,QAAS,kBAAMgD,EAAU,CAAExD,YAAWuD,kBAFxC,QAIQjJ,MCXViJ,UAAc,SAACI,EAADxI,GAAyC,IAAtByI,EAAsBzI,EAAtByI,gBACrC,OAAKA,EAIEjJ,OAAA8D,EAAA,EAAA9D,CAAA,GACFgJ,EADL,CAEExF,WAAWxD,OAAA8D,EAAA,EAAA9D,CAAA,GACNgJ,EAAexF,WADV,CAER0F,MAAMlJ,OAAA8D,EAAA,EAAA9D,CAAA,GACDgJ,EAAexF,WAAW0F,MAC1BD,EAAgBzF,WAAW0F,MAF3B,CAGHC,SAASnJ,OAAA8D,EAAA,EAAA9D,CAAA,GACJgJ,EAAexF,WAAW0F,MAAMC,SAChCF,EAAgBzF,WAAW0F,MAAMC,SAF9B,CAGNC,MAAK,GAAA9I,OAAAN,OAAAqJ,EAAA,EAAArJ,CACAgJ,EAAexF,WAAW0F,MAAMC,SAASC,OADzCpJ,OAAAqJ,EAAA,EAAArJ,CAEAiJ,EAAgBzF,WAAW0F,MAAMC,SAASC,gBAf9CJ,IA8DLM,GAAc,SAAA3E,GAAA,IAClBwE,EADkBxE,EAClBwE,SACAzD,EAFkBf,EAElBe,QACA6D,EAHkB5E,EAGlB4E,gBACAC,EAJkB7E,EAIlB6E,eACAC,EALkB9E,EAKlB8E,OACAZ,EANkBlE,EAMlBkE,UANkB,OAQlB3I,EAAAC,EAAAC,cAAA,OAAKR,UAAU,eACZuJ,EAASC,MAAMZ,IAAI,SAAA/C,GAAA,IAAGiE,EAAHjE,EAAGiE,KAAH,OAClBxJ,EAAAC,EAAAC,cAACuJ,GAAD,CAAaC,IAAKF,EAAKnG,GAAIiD,QAASkD,MAGtCxJ,EAAAC,EAAAC,cAACyJ,GAAD,CACEnE,QAASA,EACTiD,YAAaQ,EAASW,SAASnB,YAC/BtD,UAAW,CACT0E,OAAQZ,EAASW,SAASE,UAC1BT,kBACAC,iBACAC,UAEFb,YAAaA,GACbC,UAAWA,GAVb,cCxFWoB,GDoCE,SAAAvK,GAAA,IAAG6J,EAAH7J,EAAG6J,gBAAiBC,EAApB9J,EAAoB8J,eAAgBN,EAApCxJ,EAAoCwJ,MAApC,OACfhJ,EAAAC,EAAAC,cAAC+E,EAAA,MAAD,CACE+E,MAAO7D,GACPhB,UAAW,CACTkE,kBACAC,iBACAC,OAAQP,EAAMO,QAEhBU,6BAA6B,GAE5B,SAAA7F,GAAyC,IAAtClB,EAAsCkB,EAAtClB,KAAMsC,EAAgCpB,EAAhCoB,QAASC,EAAuBrB,EAAvBqB,MAAOkD,EAAgBvE,EAAhBuE,UACxB,GAAIlD,EACF,OAAOzF,EAAAC,EAAAC,cAACmH,GAAD,CAAc5B,MAAOA,IAFU,IAKhCnC,EAAeJ,EAAfI,WAER,OAAIkC,IAAYlC,EACPtD,EAAAC,EAAAC,cAAC0I,GAAD,MAIP5I,EAAAC,EAAAC,cAACgK,EAAA,SAAD,KACElK,EAAAC,EAAAC,cAACiK,GAAD,CACElB,SAAU3F,EAAW0F,MAAMC,SAC3BzD,QAASA,EACT+D,OAAQP,EAAMO,OACdF,gBAAiBA,EACjBC,eAAgBA,EAChBX,UAAWA,IAGb3I,EAAAC,EAAAC,cAACkK,GAAD,CAAYlD,QAAS5D,EAAW0F,MAAM3F,SEhCjCgH,sBAAU,iBAAkB,kBAAkB,EAA9CA,CA7BG,SAAA/J,GAAA,IAChB0I,EADgB1I,EAChB0I,MACAK,EAFgB/I,EAEhB+I,gBACAC,EAHgBhJ,EAGhBgJ,eACAgB,EAJgBhK,EAIhBgK,eACAC,EALgBjK,EAKhBiK,eALgB,OAOhBvK,EAAAC,EAAAC,cAAA,OAAKR,UAAU,aACbM,EAAAC,EAAAC,cAACuB,EAAD,CAAQkE,QAAS,kBAAM4E,GAAgBD,KACpCA,EAAiB,IAAM,KAG1BtK,EAAAC,EAAAC,cAAA,OAAKR,UAAU,qBACbM,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC6E,EAAD,CAAMC,KAAMgE,EAAMrE,KAAMqE,EAAMwB,QAEhCxK,EAAAC,EAAAC,cAAA,OAAK4F,wBAAyB,CAAEC,OAAQiD,EAAMxC,YAE7C8D,GACCtK,EAAAC,EAAAC,cAACuK,GAAD,CACEpB,gBAAiBA,EACjBC,eAAgBA,EAChBN,MAAOA,SClBX0B,UACE,QADFA,GAEE,OAFFA,GAGI,SAGJC,IAAiBC,GAAA,GAAA9K,OAAA+K,EAAA,EAAA/K,CAAA8K,GACpBF,GAAoB,oBADA5K,OAAA+K,EAAA,EAAA/K,CAAA8K,GAEpBF,GAAoB,sBAFA5K,OAAA+K,EAAA,EAAA/K,CAAA8K,GAGpBF,GAAsB,eAHFE,IAMjBE,IAAgBC,GAAA,GAAAjL,OAAA+K,EAAA,EAAA/K,CAAAiL,GACnBL,GAAoBA,IADD5K,OAAA+K,EAAA,EAAA/K,CAAAiL,GAEnBL,GAAoBA,IAFD5K,OAAA+K,EAAA,EAAA/K,CAAAiL,GAGnBL,GAAsBA,IAHHK,IAMhBC,GAAS,SAAAC,GAAU,OAAIA,IAAeP,IAEtChC,GAAc,SAACI,EAADxI,GAAyC,IAAtByI,EAAsBzI,EAAtByI,gBACrC,OAAKA,EAIEjJ,OAAA8D,EAAA,EAAA9D,CAAA,GACFgJ,EADL,CAEExF,WAAWxD,OAAA8D,EAAA,EAAA9D,CAAA,GACNgJ,EAAexF,WADV,CAER4H,OAAOpL,OAAA8D,EAAA,EAAA9D,CAAA,GACFgJ,EAAexF,WAAW4H,OAC1BnC,EAAgBzF,WAAW4H,OAF1B,CAGJhC,MAAK,GAAA9I,OAAAN,OAAAqJ,EAAA,EAAArJ,CACAgJ,EAAexF,WAAW4H,OAAOhC,OADjCpJ,OAAAqJ,EAAA,EAAArJ,CAEAiJ,EAAgBzF,WAAW4H,OAAOhC,cAZpCJ,GA8FLqC,GAAc,SAAA1G,GAAA,IAClB4E,EADkB5E,EAClB4E,gBACAC,EAFkB7E,EAElB6E,eACA2B,EAHkBxG,EAGlBwG,WACAG,EAJkB3G,EAIlB2G,mBAJkB,OAMlBpL,EAAAC,EAAAC,cAAC+E,EAAA,eAAD,KACG,SAAAjC,GAAM,OACLhD,EAAAC,EAAAC,cAAC2I,EAAD,CACElD,QAAS,kBACPyF,EAAmBN,GAAiBG,KAEtCI,YAAa,kBAvFE,SACrBrI,EACAqG,EACAC,EACA2B,GAEA,IAAMK,EAAiBR,GAAiBG,GAEpCD,GAAOM,IACTtI,EAAOgH,MAAM,CACXA,MAAO/D,EACPd,UAAW,CACTkE,kBACAC,iBACA2B,WAAYK,KA0EVC,CACEvI,EACAqG,EACAC,EACA2B,KAIHN,GAAkBM,OAMrBO,GAAY,SAAAjG,GAAA,IAChB2F,EADgB3F,EAChB2F,OACA1F,EAFgBD,EAEhBC,QACA6D,EAHgB9D,EAGhB8D,gBACAC,EAJgB/D,EAIhB+D,eACA2B,EALgB1F,EAKhB0F,WACAtC,EANgBpD,EAMhBoD,UANgB,OAQhB3I,EAAAC,EAAAC,cAAA,OAAKR,UAAU,aACZwL,EAAOhC,MAAMZ,IAAI,SAAAzC,GAAA,IAAG2D,EAAH3D,EAAG2D,KAAH,OAChBxJ,EAAAC,EAAAC,cAACuL,GAAD,CACE/B,IAAKF,EAAKnG,GACV2F,MAAOQ,EACPH,gBAAiBA,EACjBC,eAAgBA,MAIpBtJ,EAAAC,EAAAC,cAACyJ,GAAD,CACEnE,QAASA,EACTiD,YAAayC,EAAOtB,SAASnB,YAC7BtD,UAAW,CACT0E,OAAQqB,EAAOtB,SAASE,UACxBT,kBACAC,iBACA2B,cAEFvC,YAAaA,GACbC,UAAWA,GAVb,YC5KW+C,GD6LArB,YACb,aACA,qBACAK,GAHaL,CArHA,SAAA7K,GAAA,IACb6J,EADa7J,EACb6J,gBACAC,EAFa9J,EAEb8J,eACA2B,EAHazL,EAGbyL,WACAG,EAJa5L,EAIb4L,mBAJa,OAMbpL,EAAAC,EAAAC,cAAA,OAAKR,UAAU,UACbM,EAAAC,EAAAC,cAACyL,GAAD,CACEtC,gBAAiBA,EACjBC,eAAgBA,EAChB2B,WAAYA,EACZG,mBAAoBA,IAGrBJ,GAAOC,IACNjL,EAAAC,EAAAC,cAAC+E,EAAA,MAAD,CACE+E,MAAO/D,EACPd,UAAW,CACTkE,kBACAC,iBACA2B,cAEFhB,6BAA6B,GAE5B,SAAA7F,GAAyC,IAAtClB,EAAsCkB,EAAtClB,KAAMsC,EAAgCpB,EAAhCoB,QAASC,EAAuBrB,EAAvBqB,MAAOkD,EAAgBvE,EAAhBuE,UACxB,GAAIlD,EACF,OAAOzF,EAAAC,EAAAC,cAACmH,GAAD,CAAc5B,MAAOA,IAFU,IAKhCnC,EAAeJ,EAAfI,WAER,OAAIkC,IAAYlC,EACPtD,EAAAC,EAAAC,cAAC0I,GAAD,MAGJtF,EAAW4H,OAAOhC,MAAM0C,OAK3B5L,EAAAC,EAAAC,cAAC2L,GAAD,CACEX,OAAQ5H,EAAW4H,OACnB1F,QAASA,EACT6D,gBAAiBA,EACjBC,eAAgBA,EAChB2B,WAAYA,EACZtC,UAAWA,IAVN3I,EAAAC,EAAAC,cAAA,OAAKR,UAAU,aAAf,sBEvGboM,GAAiB,SAAAC,GAAK,OAAI,SAC9BjD,EAD8BxI,GAG3B,IADDyI,EACCzI,EADDyI,gBAEF,OAAKA,EAIEjJ,OAAA8D,EAAA,EAAA9D,CAAA,GACFgJ,EADLhJ,OAAA+K,EAAA,EAAA/K,CAAA,GAEGiM,EAFHjM,OAAA8D,EAAA,EAAA9D,CAAA,GAGOgJ,EAAeiD,GAHtB,CAIIC,aAAalM,OAAA8D,EAAA,EAAA9D,CAAA,GACRgJ,EAAeiD,GAAOC,aACtBjD,EAAgBgD,GAAOC,aAFhB,CAGV9C,MAAK,GAAA9I,OAAAN,OAAAqJ,EAAA,EAAArJ,CACAgJ,EAAeiD,GAAOC,aAAa9C,OADnCpJ,OAAAqJ,EAAA,EAAArJ,CAEAiJ,EAAgBgD,GAAOC,aAAa9C,cAZtCJ,ICPImD,8MDoCbC,eAAiB,WACf,IAAIC,EACDC,SAASC,iBAAmBD,SAASC,gBAAgBF,WACtDC,SAASjF,KAAKgF,UACZG,EACDF,SAASC,iBAAmBD,SAASC,gBAAgBC,cACtDF,SAASjF,KAAKmF,aACZC,EACFH,SAASC,gBAAgBE,cAAgBpN,OAAOqN,YAC9CC,EAAmBC,KAAKC,KAAKR,EAAYI,IAAiBD,EACxDnH,EAAU,CACZ0E,OAAQ/I,EAAKjB,MAAMmM,aAAapC,SAASE,WAXxB8C,EAasB9L,EAAKjB,MAAvC8I,EAbYiE,EAaZjE,UAAWoD,EAbCa,EAaDb,MAAOC,EAbNY,EAaMZ,aACvBS,GAAoBT,EAAapC,SAASnB,aAC5CE,EAAU,CAAExD,YAAWuD,YAAaoD,GAAeC,yFAtBrD5M,OAAO0N,iBAAiB,SAAUtL,KAAK2K,+DAIvC/M,OAAO2N,oBAAoB,SAAUvL,KAAK2K,iDAuBzC,OACHlM,EAAAC,EAAAC,cAAA,WACGqB,KAAK1B,MAAMmM,aAAa9C,MAAMZ,IAAI,SAAA9I,GAAA,IAAGgK,EAAHhK,EAAGgK,KAAH,OACjCxJ,EAAAC,EAAAC,cAAA,OAAKwJ,IAAKF,EAAKnG,GAAI3D,UAAU,kBAC3BM,EAAAC,EAAAC,cAAC6M,EAAmBvD,GAEpBxJ,EAAAC,EAAAC,cAAC8M,GAAD,CACE1D,eAAgBE,EAAK9E,KACrB2E,gBAAiBG,EAAK1E,MAAMkB,mBArCOtE,IAAMuL,ocExBnD,IAAMC,GAAmChL,IAAHiL,KAqBlClL,GA+BWmL,GA5BC,kBACdpN,EAAAC,EAAAC,cAAC+E,EAAA,MAAD,CACE+E,MAAOkD,GACPjD,6BAA6B,GAE5B,SAAA3J,GAAyC,IAAtC4C,EAAsC5C,EAAtC4C,KAAMsC,EAAgClF,EAAhCkF,QAASC,EAAuBnF,EAAvBmF,MAAOkD,EAAgBrI,EAAhBqI,UAChB0E,EAAWnK,EAAXmK,OAER,OAAI7H,IAAY6H,EACPrN,EAAAC,EAAAC,cAAC0I,GAAD,CAASZ,UAAU,IAGxBvC,EACKzF,EAAAC,EAAAC,cAACmH,GAAD,CAAc5B,MAAOA,IAI5BzF,EAAAC,EAAAC,cAACoN,GAAD,CACE9H,QAASA,EACTwG,aAAcqB,EAAOrB,aACrBrD,UAAWA,EACXoD,MAAO,0vBC7CjB,IAAMwB,GAAmCrL,IAAHsL,KAoClCvL,GAmCWwL,GAhCM,SAAAnN,GAAA,IAAGS,EAAHT,EAAGS,iBAAH,OACnBf,EAAAC,EAAAC,cAAC+E,EAAA,MAAD,CACE+E,MAAOuD,GACPpI,UAAW,CACTpE,oBAEF2M,KAA2B,KAArB3M,EACNkJ,6BAA6B,GAE5B,SAAAzK,GAAyC,IAAtC0D,EAAsC1D,EAAtC0D,KAAMsC,EAAgChG,EAAhCgG,QAASC,EAAuBjG,EAAvBiG,MAAOkD,EAAgBnJ,EAAhBmJ,UACxB,GAAIlD,EACF,OAAOzF,EAAAC,EAAAC,cAACmH,GAAD,CAAc5B,MAAOA,IAE9BkI,QAAQC,IAAI1K,EAAK2K,QAJuB,IAKhCC,EAAiB5K,EAAjB4K,aAER,OAAItI,IAAYsI,EACP9N,EAAAC,EAAAC,cAAC0I,GAAD,CAASZ,UAAU,IAI1BhI,EAAAC,EAAAC,cAACoN,GAAD,CACE9H,QAASA,EACTwG,aAAc8B,EAAa9B,aAC3BrD,UAAWA,EACXoD,MAAO,oBCdFgC,qNA9CbnN,MAAQ,CACNG,iBAAkB,oBAGpBM,qBAAuB,SAAAR,GACrBC,EAAKI,SAAS,CAAEH,iBAAkBF,6EAG3B,IACCE,EAAqBQ,KAAKX,MAA1BG,iBAER,OACEf,EAAAC,EAAAC,cAAC8N,EAAA,EAAD,KACEhO,EAAAC,EAAAC,cAAA,OAAKR,UAAU,OACbM,EAAAC,EAAAC,cAAC+N,EAAD,CACElN,iBAAkBA,EAClBM,qBAAsBE,KAAKF,uBAG7BrB,EAAAC,EAAAC,cAAA,OAAKR,UAAU,YACbM,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACEC,OAAK,EACLC,KvBlCc,IuBmCdC,UAAW,kBACTrO,EAAAC,EAAAC,cAAA,OAAKR,UAAU,4BACbM,EAAAC,EAAAC,cAACoO,GAAD,CAAcvN,iBAAkBA,QAItCf,EAAAC,EAAAC,cAACgO,EAAA,EAAD,CACEC,OAAK,EACLC,KvB1CS,WuB2CTC,UAAW,kBACTrO,EAAAC,EAAAC,cAAA,OAAKR,UAAU,4BACbM,EAAAC,EAAAC,cAACqO,GAAD,oBAnCA5M,cCKZ6M,UAAW,IAAIC,IAAS,CAC5BC,IAHsB,iCAItBC,QAAS,CACPC,cAAa,UAAAxO,OACXyO,gDAKAC,GAAYC,YAAQ,SAAAzO,GAAqC,IAAlC0O,EAAkC1O,EAAlC0O,cAAeC,EAAmB3O,EAAnB2O,aACtCD,GACFA,EAAc1G,IAAI,SAAA9I,GAAA,IAAG0P,EAAH1P,EAAG0P,QAASC,EAAZ3P,EAAY2P,UAAWf,EAAvB5O,EAAuB4O,KAAvB,OAChBT,QAAQC,IAAR,6BAAAxN,OAC+B8O,EAD/B,gBAAA9O,OACqD+O,EADrD,YAAA/O,OACyEgO,MAKzEa,GACFtB,QAAQC,IAAR,oBAAAxN,OAAgC6O,MAI9BG,GAAOC,IAAWC,KAAK,CAACR,GAAWN,KAEnCe,GAAQ,IAAIC,IAEZxM,GAAS,IAAIyM,IAAa,CAC9BL,QACAG,WAGFG,IAASC,OACP3P,EAAAC,EAAAC,cAAC+E,EAAA,eAAD,CAAgBjC,OAAQA,IACtBhD,EAAAC,EAAAC,cAAC0P,GAAD,OAEFxD,SAASyD,eAAe,S5BmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhJ,KAAK,SAAAiJ,GACjCA,EAAaC","file":"static/js/main.e6fce866.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\n        'Error during service worker registration:',\n        error,\n      );\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') ===\n          -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport './style.css';\n\nconst Button = ({\n  children,\n  className,\n  color = 'black',\n  type = 'button',\n  ...props\n}) => (\n  <button\n    className={`${className} Button Button_${color}`}\n    type={type}\n    {...props}\n  >\n    {children}\n  </button>\n);\n\nconst ButtonUnobtrusive = ({\n  children,\n  className,\n  type = 'button',\n  ...props\n}) => (\n  <button\n    className={`${className} Button_unobtrusive`}\n    type={type}\n    {...props}\n  >\n    {children}\n  </button>\n);\n\nexport { ButtonUnobtrusive };\n\nexport default Button;\n","import React from 'react';\n\nimport './style.css';\n\nconst Input = ({ children, color = 'black', ...props }) => (\n  <input className={`Input Input_${color}`} {...props}>\n    {children}\n  </input>\n);\n\nexport default Input;\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport * as routes from '../../constants/routes';\nimport Button from '../../Button';\nimport Input from '../../Input';\n\nimport './style.css';\n\nconst Navigation = ({\n  location: { pathname },\n  organizationName,\n  onOrganizationSearch,\n}) => (\n  <header className=\"Navigation\">\n    <div className=\"Navigation-link\">\n      <Link to={routes.PROFILE}>Profile</Link>\n    </div>\n    <div className=\"Navigation-link\">\n      <Link to={routes.ORGANIZATION}>Organization</Link>\n    </div>\n\n    {pathname === routes.ORGANIZATION && (\n      <OrganizationSearch\n        organizationName={organizationName}\n        onOrganizationSearch={onOrganizationSearch}\n      />\n    )}\n  </header>\n);\n\nclass OrganizationSearch extends React.Component {\n  state = {\n    value: this.props.organizationName,\n  };\n\n  onChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  onSubmit = event => {\n    this.props.onOrganizationSearch(this.state.value || 'moduscreateorg');\n\n    event.preventDefault();\n  };\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <div className=\"Navigation-search\">\n        <form onSubmit={this.onSubmit}>\n          <Input\n            color={'white'}\n            type=\"text\"\n            value={value}\n            onChange={this.onChange}\n          />{' '}\n          <Button color={'white'} type=\"submit\">\n            Search\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Navigation);\n","export const ORGANIZATION = '/';\nexport const PROFILE = '/profile';\n","import gql from 'graphql-tag';\n\nconst REPOSITORY_FRAGMENT = gql`\n  fragment repository on Repository {\n    id\n    name\n    url\n    descriptionHTML\n    primaryLanguage {\n      name\n    }\n    owner {\n      login\n      url\n    }\n    stargazers {\n      totalCount\n    }\n    viewerHasStarred\n    watchers {\n      totalCount\n    }\n    viewerSubscription\n  }\n`;\n\nexport default REPOSITORY_FRAGMENT;\n","import React from 'react';\n\nconst Link = ({ children, ...props }) => (\n  <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nexport default Link;\n","import gql from 'graphql-tag';\n\nexport const STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nexport const UNSTAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nexport const WATCH_REPOSITORY = gql`\n  mutation($id: ID!, $viewerSubscription: SubscriptionState!) {\n    updateSubscription(\n      input: { state: $viewerSubscription, subscribableId: $id }\n    ) {\n      subscribable {\n        id\n        viewerSubscription\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport Link from '../../Link';\nimport Button from '../../Button';\n\nimport '../style.css';\n\nimport {\n  STAR_REPOSITORY,\n  UNSTAR_REPOSITORY,\n  WATCH_REPOSITORY,\n} from '../mutations';\n\nconst VIEWER_SUBSCRIPTIONS = {\n  SUBSCRIBED: 'SUBSCRIBED',\n  UNSUBSCRIBED: 'UNSUBSCRIBED',\n};\n\nconst isWatch = viewerSubscription =>\n  viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\n\nconst updateWatch = (\n  client,\n  {\n    data: {\n      updateSubscription: {\n        subscribable: { id, viewerSubscription },\n      },\n    },\n  },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  let { totalCount } = repository.watchers;\n  totalCount =\n    viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED\n      ? totalCount + 1\n      : totalCount - 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      watchers: {\n        ...repository.watchers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst updateAddStar = (\n  client,\n  {\n    data: {\n      addStar: {\n        starrable: { id, viewerHasStarred },\n      },\n    },\n  },\n) =>\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: getUpdatedStarData(client, id, viewerHasStarred),\n  });\n\nconst updateRemoveStar = (\n  client,\n  {\n    data: {\n      removeStar: {\n        starrable: { id, viewerHasStarred },\n      },\n    },\n  },\n) => {\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: getUpdatedStarData(client, id, viewerHasStarred),\n  });\n};\n\nconst getUpdatedStarData = (client, id, viewerHasStarred) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  let { totalCount } = repository.stargazers;\n  totalCount = viewerHasStarred ? totalCount + 1 : totalCount - 1;\n\n  return {\n    ...repository,\n    stargazers: {\n      ...repository.stargazers,\n      totalCount,\n    },\n  };\n};\n\nconst RepositoryItem = ({\n  id,\n  name,\n  url,\n  descriptionHTML,\n  primaryLanguage,\n  owner,\n  stargazers,\n  watchers,\n  viewerSubscription,\n  viewerHasStarred,\n}) => (\n  <div>\n    <div className=\"RepositoryItem-title\">\n      <h2>\n        <Link href={url}>{name}</Link>\n      </h2>\n\n      <div>\n        <Mutation\n          mutation={WATCH_REPOSITORY}\n          variables={{\n            id,\n            viewerSubscription: isWatch(viewerSubscription)\n              ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n              : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n          }}\n          optimisticResponse={{\n            updateSubscription: {\n              __typename: 'Mutation',\n              subscribable: {\n                __typename: 'Repository',\n                id,\n                viewerSubscription: isWatch(viewerSubscription)\n                  ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n                  : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n              },\n            },\n          }}\n          update={updateWatch}\n        >\n          {(updateSubscription, { data, loading, error }) => (\n            <Button\n              className=\"RepositoryItem-title-action\"\n              data-test-id=\"updateSubscription\"\n              onClick={updateSubscription}\n            >\n              {watchers.totalCount}{' '}\n              {isWatch(viewerSubscription) ? 'Unwatch' : 'Watch'}\n            </Button>\n          )}\n        </Mutation>\n\n        {!viewerHasStarred ? (\n          <Mutation\n            mutation={STAR_REPOSITORY}\n            variables={{ id }}\n            optimisticResponse={{\n              addStar: {\n                __typename: 'Mutation',\n                starrable: {\n                  __typename: 'Repository',\n                  id,\n                  viewerHasStarred: !viewerHasStarred,\n                },\n              },\n            }}\n            update={updateAddStar}\n          >\n            {(addStar, { data, loading, error }) => (\n              <Button\n                className={'RepositoryItem-title-action'}\n                onClick={addStar}\n              >\n                {stargazers.totalCount} Star\n              </Button>\n            )}\n          </Mutation>\n        ) : (\n          <Mutation\n            mutation={UNSTAR_REPOSITORY}\n            variables={{ id }}\n            optimisticResponse={{\n              removeStar: {\n                __typename: 'Mutation',\n                starrable: {\n                  __typename: 'Repository',\n                  id,\n                  viewerHasStarred: !viewerHasStarred,\n                },\n              },\n            }}\n            update={updateRemoveStar}\n          >\n            {(removeStar, { data, loading, error }) => (\n              <Button\n                className=\"RepositoryItem-title-action\"\n                onClick={removeStar}\n              >\n                {stargazers.totalCount} Unstar\n              </Button>\n            )}\n          </Mutation>\n        )}\n      </div>\n    </div>\n\n    <div className=\"RepositoryItem-description\">\n      <div\n        className=\"RepositoryItem-description-info\"\n        dangerouslySetInnerHTML={{ __html: descriptionHTML }}\n      />\n      <div className=\"RepositoryItem-description-details\">\n        <div>\n          {primaryLanguage && (\n            <span>Language: {primaryLanguage.name}</span>\n          )}\n        </div>\n        <div>\n          {owner && (\n            <span>\n              Owner: <a href={owner.url}>{owner.login}</a>\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default RepositoryItem;\n","import gql from 'graphql-tag';\n\nexport const GET_ISSUES_OF_REPOSITORY = gql`\n  query(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $issueState: IssueState!\n    $cursor: String\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issues(first: 5, states: [$issueState], after: $cursor) {\n        edges {\n          node {\n            id\n            number\n            state\n            title\n            url\n            bodyHTML\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const GET_COMMENTS_OF_ISSUE = gql`\n  query(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $number: Int!\n    $cursor: String\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issue(number: $number) {\n        id\n        comments(first: 1, after: $cursor) {\n          edges {\n            node {\n              id\n              bodyHTML\n              author {\n                login\n              }\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nimport './style.css';\n\nconst Comment = ({ comment }) => (\n  <div className=\"CommentItem\">\n    <div>{comment.author.login}:</div>\n    &nbsp;\n    <div dangerouslySetInnerHTML={{ __html: comment.bodyHTML }} />\n  </div>\n);\n\nexport default Comment;\n","import gql from 'graphql-tag';\n\nexport const ADD_COMMENT = gql`\n  mutation($subjectId: ID!, $body: String!) {\n    addComment(input: { subjectId: $subjectId, body: $body }) {\n      commentEdge {\n        node {\n          body\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nimport './style.css';\n\nconst TextArea = ({ children, ...props }) => (\n  <textarea className={`TextArea`} {...props}>\n    {children}\n  </textarea>\n);\n\nexport default TextArea;\n","import React from 'react';\n\nimport './style.css';\n\nconst ErrorMessage = ({ error }) => (\n  <div className=\"ErrorMessage\">\n    <small>{error.toString()}</small>\n  </div>\n);\n\nexport default ErrorMessage;\n","import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport { ADD_COMMENT } from './mutations';\n\nimport TextArea from '../../TextArea';\nimport Button from '../../Button';\nimport ErrorMessage from '../../Error';\n\nclass CommentAdd extends Component {\n  state = {\n    value: '',\n  };\n\n  onChange = value => {\n    this.setState({ value });\n  };\n\n  onSubmit = (event, addComment) => {\n    addComment().then(() => this.setState({ value: '' }));\n\n    event.preventDefault();\n  };\n\n  render() {\n    const { issueId } = this.props;\n    const { value } = this.state;\n\n    return (\n      <Mutation\n        mutation={ADD_COMMENT}\n        variables={{ body: value, subjectId: issueId }}\n      >\n        {(addComment, { data, loading, error }) => (\n          <div>\n            {error && <ErrorMessage error={error} />}\n\n            <form onSubmit={e => this.onSubmit(e, addComment)}>\n              <TextArea\n                value={value}\n                onChange={e => this.onChange(e.target.value)}\n                placeholder=\"Leave a comment\"\n              />\n              <Button type=\"submit\">Comment</Button>\n            </form>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default CommentAdd;\n","import React, { Component } from 'react';\n\nimport './style.css';\n\nconst TICK_RATE = 500;\n\nclass Loading extends Component {\n  state = {\n    dots: 0,\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(this.onTick, TICK_RATE);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onTick = () => {\n    this.setState(prevState => ({ dots: (prevState.dots + 1) % 4 }));\n  };\n\n  render() {\n    const { isCenter } = this.props;\n    const { dots } = this.state;\n\n    const classNames = ['Loading'];\n\n    if (isCenter) {\n      classNames.push('Loading_center');\n    }\n\n    return (\n      <div className={classNames.join(' ')}>\n        <small>\n          Loading {new Array(dots).fill(0).map(dot => '.')}\n        </small>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\n\nimport Loading from '../Loading';\nimport { ButtonUnobtrusive } from '../Button';\n\nimport './style.css';\n\nconst FetchMore = ({\n  loading,\n  hasNextPage,\n  variables,\n  updateQuery,\n  fetchMore,\n  children,\n}) => (\n  <div className=\"FetchMore\">\n    {loading ? (\n      <Loading />\n    ) : (\n      hasNextPage && (\n        <ButtonUnobtrusive\n          className=\"FetchMore-button\"\n          onClick={() => fetchMore({ variables, updateQuery })}\n        >\n          More {children}\n        </ButtonUnobtrusive>\n      )\n    )}\n  </div>\n);\n\nexport default FetchMore;\n","import React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { GET_COMMENTS_OF_ISSUE } from './queries';\nimport CommentItem from '../CommentItem';\nimport CommentAdd from '../CommentAdd';\n\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../Error';\nimport FetchMore from '../../FetchMore';\n\nimport './style.css';\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    repository: {\n      ...previousResult.repository,\n      issue: {\n        ...previousResult.repository.issue,\n        ...fetchMoreResult.repository.issue,\n        comments: {\n          ...previousResult.repository.issue.comments,\n          ...fetchMoreResult.repository.issue.comments,\n          edges: [\n            ...previousResult.repository.issue.comments.edges,\n            ...fetchMoreResult.repository.issue.comments.edges,\n          ],\n        },\n      },\n    },\n  };\n};\n\nconst Comments = ({ repositoryOwner, repositoryName, issue }) => (\n  <Query\n    query={GET_COMMENTS_OF_ISSUE}\n    variables={{\n      repositoryOwner,\n      repositoryName,\n      number: issue.number,\n    }}\n    notifyOnNetworkStatusChange={true}\n  >\n    {({ data, loading, error, fetchMore }) => {\n      if (error) {\n        return <ErrorMessage error={error} />;\n      }\n\n      const { repository } = data;\n\n      if (loading && !repository) {\n        return <Loading />;\n      }\n\n      return (\n        <Fragment>\n          <CommentList\n            comments={repository.issue.comments}\n            loading={loading}\n            number={issue.number}\n            repositoryOwner={repositoryOwner}\n            repositoryName={repositoryName}\n            fetchMore={fetchMore}\n          />\n\n          <CommentAdd issueId={repository.issue.id} />\n        </Fragment>\n      );\n    }}\n  </Query>\n);\n\nconst CommentList = ({\n  comments,\n  loading,\n  repositoryOwner,\n  repositoryName,\n  number,\n  fetchMore,\n}) => (\n  <div className=\"CommentList\">\n    {comments.edges.map(({ node }) => (\n      <CommentItem key={node.id} comment={node} />\n    ))}\n\n    <FetchMore\n      loading={loading}\n      hasNextPage={comments.pageInfo.hasNextPage}\n      variables={{\n        cursor: comments.pageInfo.endCursor,\n        repositoryOwner,\n        repositoryName,\n        number,\n      }}\n      updateQuery={updateQuery}\n      fetchMore={fetchMore}\n    >\n      Comments\n    </FetchMore>\n  </div>\n);\n\nexport default Comments;\n","import Comments from './CommentList';\n\nexport default Comments;\n","import React from 'react';\nimport { withState } from 'recompose';\n\nimport Button from '../../Button';\nimport Comments from '../../Comment';\nimport Link from '../../Link';\n\nimport './style.css';\n\nconst IssueItem = ({\n  issue,\n  repositoryOwner,\n  repositoryName,\n  isShowComments,\n  onShowComments,\n}) => (\n  <div className=\"IssueItem\">\n    <Button onClick={() => onShowComments(!isShowComments)}>\n      {isShowComments ? '-' : '+'}\n    </Button>\n\n    <div className=\"IssueItem-content\">\n      <h3>\n        <Link href={issue.url}>{issue.title}</Link>\n      </h3>\n      <div dangerouslySetInnerHTML={{ __html: issue.bodyHTML }} />\n\n      {isShowComments && (\n        <Comments\n          repositoryOwner={repositoryOwner}\n          repositoryName={repositoryName}\n          issue={issue}\n        />\n      )}\n    </div>\n  </div>\n);\n\nexport default withState('isShowComments', 'onShowComments', false)(\n  IssueItem,\n);\n","import React from 'react';\nimport { Query, ApolloConsumer } from 'react-apollo';\nimport { withState } from 'recompose';\n\nimport { GET_ISSUES_OF_REPOSITORY } from './queries';\nimport IssueItem from '../IssueItem';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../Error';\nimport FetchMore from '../../FetchMore';\nimport { ButtonUnobtrusive } from '../../Button';\n\nimport './style.css';\n\nconst ISSUE_STATES = {\n  NONE: 'NONE',\n  OPEN: 'OPEN',\n  CLOSED: 'CLOSED',\n};\n\nconst TRANSITION_LABELS = {\n  [ISSUE_STATES.NONE]: 'Show Open Issues',\n  [ISSUE_STATES.OPEN]: 'Show Closed Issues',\n  [ISSUE_STATES.CLOSED]: 'Hide Issues',\n};\n\nconst TRANSITION_STATE = {\n  [ISSUE_STATES.NONE]: ISSUE_STATES.OPEN,\n  [ISSUE_STATES.OPEN]: ISSUE_STATES.CLOSED,\n  [ISSUE_STATES.CLOSED]: ISSUE_STATES.NONE,\n};\n\nconst isShow = issueState => issueState !== ISSUE_STATES.NONE;\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    repository: {\n      ...previousResult.repository,\n      issues: {\n        ...previousResult.repository.issues,\n        ...fetchMoreResult.repository.issues,\n        edges: [\n          ...previousResult.repository.issues.edges,\n          ...fetchMoreResult.repository.issues.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst prefetchIssues = (\n  client,\n  repositoryOwner,\n  repositoryName,\n  issueState,\n) => {\n  const nextIssueState = TRANSITION_STATE[issueState];\n\n  if (isShow(nextIssueState)) {\n    client.query({\n      query: GET_ISSUES_OF_REPOSITORY,\n      variables: {\n        repositoryOwner,\n        repositoryName,\n        issueState: nextIssueState,\n      },\n    });\n  }\n};\n\nconst Issues = ({\n  repositoryOwner,\n  repositoryName,\n  issueState,\n  onChangeIssueState,\n}) => (\n  <div className=\"Issues\">\n    <IssueFilter\n      repositoryOwner={repositoryOwner}\n      repositoryName={repositoryName}\n      issueState={issueState}\n      onChangeIssueState={onChangeIssueState}\n    />\n\n    {isShow(issueState) && (\n      <Query\n        query={GET_ISSUES_OF_REPOSITORY}\n        variables={{\n          repositoryOwner,\n          repositoryName,\n          issueState,\n        }}\n        notifyOnNetworkStatusChange={true}\n      >\n        {({ data, loading, error, fetchMore }) => {\n          if (error) {\n            return <ErrorMessage error={error} />;\n          }\n\n          const { repository } = data;\n\n          if (loading && !repository) {\n            return <Loading />;\n          }\n\n          if (!repository.issues.edges.length) {\n            return <div className=\"IssueList\">No issues ...</div>;\n          }\n\n          return (\n            <IssueList\n              issues={repository.issues}\n              loading={loading}\n              repositoryOwner={repositoryOwner}\n              repositoryName={repositoryName}\n              issueState={issueState}\n              fetchMore={fetchMore}\n            />\n          );\n        }}\n      </Query>\n    )}\n  </div>\n);\n\nconst IssueFilter = ({\n  repositoryOwner,\n  repositoryName,\n  issueState,\n  onChangeIssueState,\n}) => (\n  <ApolloConsumer>\n    {client => (\n      <ButtonUnobtrusive\n        onClick={() =>\n          onChangeIssueState(TRANSITION_STATE[issueState])\n        }\n        onMouseOver={() =>\n          prefetchIssues(\n            client,\n            repositoryOwner,\n            repositoryName,\n            issueState,\n          )\n        }\n      >\n        {TRANSITION_LABELS[issueState]}\n      </ButtonUnobtrusive>\n    )}\n  </ApolloConsumer>\n);\n\nconst IssueList = ({\n  issues,\n  loading,\n  repositoryOwner,\n  repositoryName,\n  issueState,\n  fetchMore,\n}) => (\n  <div className=\"IssueList\">\n    {issues.edges.map(({ node }) => (\n      <IssueItem\n        key={node.id}\n        issue={node}\n        repositoryOwner={repositoryOwner}\n        repositoryName={repositoryName}\n      />\n    ))}\n\n    <FetchMore\n      loading={loading}\n      hasNextPage={issues.pageInfo.hasNextPage}\n      variables={{\n        cursor: issues.pageInfo.endCursor,\n        repositoryOwner,\n        repositoryName,\n        issueState,\n      }}\n      updateQuery={updateQuery}\n      fetchMore={fetchMore}\n    >\n      Issues\n    </FetchMore>\n  </div>\n);\n\nexport default withState(\n  'issueState',\n  'onChangeIssueState',\n  ISSUE_STATES.NONE,\n)(Issues);\n","import Issues from './IssueList';\n\nexport default Issues;\n","import React from 'react';\n\nimport RepositoryItem from '../RepositoryItem';\nimport Issues from '../../Issue';\n\nimport '../style.css';\n\nconst getUpdateQuery = entry => (\n  previousResult,\n  { fetchMoreResult },\n) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    [entry]: {\n      ...previousResult[entry],\n      repositories: {\n        ...previousResult[entry].repositories,\n        ...fetchMoreResult[entry].repositories,\n        edges: [\n          ...previousResult[entry].repositories.edges,\n          ...fetchMoreResult[entry].repositories.edges,\n        ],\n      },\n    },\n  };\n};\n\n\n export default class RepositoryList extends React.PureComponent {\n   componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleOnScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleOnScroll);\n  }\n\n  handleOnScroll = () => {\n    var scrollTop =\n      (document.documentElement && document.documentElement.scrollTop) ||\n      document.body.scrollTop;\n    var scrollHeight =\n      (document.documentElement && document.documentElement.scrollHeight) ||\n      document.body.scrollHeight;\n    var clientHeight =\n      document.documentElement.clientHeight || window.innerHeight;\n    var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n    const variables={\n        cursor: this.props.repositories.pageInfo.endCursor,\n      }\n      const {fetchMore, entry, repositories} = this.props;\n    if (scrolledToBottom && repositories.pageInfo.hasNextPage ) {\n      fetchMore({ variables, updateQuery: getUpdateQuery(entry)});\n    }\n  };\n\n   render(){\n     return (\n  <div>\n    {this.props.repositories.edges.map(({ node }) => (\n      <div key={node.id} className=\"RepositoryItem\">\n        <RepositoryItem {...node} />\n\n        <Issues\n          repositoryName={node.name}\n          repositoryOwner={node.owner.login}\n        />\n      </div>\n    ))}\n\n    \n   </div>\n)\n   }\n }\n","import RepositoryList from './RepositoryList';\nimport REPOSITORY_FRAGMENT from './fragments';\n\nexport { REPOSITORY_FRAGMENT };\n\nexport default RepositoryList;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\nimport Loading from '../Loading';\nimport ErrorMessage from '../Error';\n\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query($cursor: String) {\n    viewer {\n      repositories(\n        first: 7\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Profile = () => (\n  <Query\n    query={GET_REPOSITORIES_OF_CURRENT_USER}\n    notifyOnNetworkStatusChange={true}\n  >\n    {({ data, loading, error, fetchMore }) => {\n      const { viewer } = data;\n\n      if (loading && !viewer) {\n        return <Loading isCenter={true} />;\n      }\n\n      if (error) {\n        return <ErrorMessage error={error} />;\n      }\n\n      return (\n        <RepositoryList\n          loading={loading}\n          repositories={viewer.repositories}\n          fetchMore={fetchMore}\n          entry={'viewer'}\n        />\n      );\n    }}\n  </Query>\n);\n\nexport default Profile;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\nimport Loading from '../Loading';\nimport ErrorMessage from '../Error';\n\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\n  query($organizationName: String!, $cursor: String) {\n    organization(login: $organizationName) {\n      repositories(first: 7, after: $cursor, orderBy: { direction: ASC, field: STARGAZERS}) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  search(query:$organizationName, type:REPOSITORY, first:20){  \n  repositoryCount\n  pageInfo{\n   endCursor\n   startCursor\n  }\n  edges{\n   node{\n    ... on Repository{\n     id\n     name\n     createdAt \n     description \n     isArchived\n     isPrivate\n    }\n   }\n  }\n }\n}\n  \n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Organization = ({ organizationName }) => (\n  <Query\n    query={GET_REPOSITORIES_OF_ORGANIZATION}\n    variables={{\n      organizationName,\n    }}\n    skip={organizationName === ''}\n    notifyOnNetworkStatusChange={true}\n  >\n    {({ data, loading, error, fetchMore }) => {\n      if (error) {\n        return <ErrorMessage error={error} />;\n      }\n      console.log(data.search);\n      const { organization } = data;\n\n      if (loading && !organization) {\n        return <Loading isCenter={true} />;\n      }\n\n      return (\n        <RepositoryList\n          loading={loading}\n          repositories={organization.repositories}\n          fetchMore={fetchMore}\n          entry={'organization'}\n        />\n      );\n    }}\n  </Query>\n);\n\nexport default Organization;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Navigation from './Navigation';\nimport Profile from '../Profile';\nimport Organization from '../Organization';\n\nimport * as routes from '../constants/routes';\n\nimport './style.css';\n\nclass App extends Component {\n  state = {\n    organizationName: 'moduscreateorg',\n  };\n\n  onOrganizationSearch = value => {\n    this.setState({ organizationName: value });\n  };\n\n  render() {\n    const { organizationName } = this.state;\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navigation\n            organizationName={organizationName}\n            onOrganizationSearch={this.onOrganizationSearch}\n          />\n\n          <div className=\"App-main\">\n            <Route\n              exact\n              path={routes.ORGANIZATION}\n              component={() => (\n                <div className=\"App-content_large-header\">\n                  <Organization organizationName={organizationName} />\n                </div>\n              )}\n            />\n            <Route\n              exact\n              path={routes.PROFILE}\n              component={() => (\n                <div className=\"App-content_small-header\">\n                  <Profile />\n                </div>\n              )}\n            />\n          </div>\n\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nimport './style.css';\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\n\nconst httpLink = new HttpLink({\n  uri: GITHUB_BASE_URL,\n  headers: {\n    authorization: `Bearer ${\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n    }`,\n  },\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n  }\n\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\n\nconst link = ApolloLink.from([errorLink, httpLink]);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}